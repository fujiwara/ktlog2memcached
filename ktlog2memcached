#!/usr/bin/env perl
use strict;
use warnings;
use MIME::Base64;
use Storable qw/ thaw /;
use Cache::Memcached;
use Pod::Usage qw/pod2usage/;
use Getopt::Long qw/GetOptions :config auto_help pass_through/;
use Compress::Zlib;
use Config::PL;

GetOptions(\my %options, qw/
    config=s
    host=s
    port=i
    use-flag
/) or pod2usage(2);

my $config;
if (defined $options{config}) {
    $config = config_do $options{config};
}
else {
    $options{host} ||= "localhost";
    $options{port} ||= 11211;
    $config = {
        servers => [ "$options{host}:$options{port}" ],
    };
}
my $cache = Cache::Memcached->new($config);

LOG:
while (my $line = <>) {
    chomp $line;
    my ($rts, $rsid, $rdbid, $rcmd, $key, $value) = split /\t/, $line;
    next if !defined $rts;

    if ($rcmd eq "set") {
        $key = decode_base64($key);
        $value = decode_base64($value);

        # parse expire time (first 5 bytes, big endian int)
        my @nums = unpack("C5", substr($value, 0, 5, ""));
        my $xt = 0;
        for my $num (@nums) {
            $xt = ($xt << 8) + $num;
        }
        # not expire
        undef $xt if $xt >= 2 ** 32;

        if ($options{"use-flag"}) {
            # parse memcached flag
            my (undef, undef, undef, $flag) = unpack("C*", substr($value, -4, 4, ""));
            # restore Perl's value
            if ($flag & Cache::Memcached::F_COMPRESS) {
                $value = Compress::Zlib::memGunzip($value);
            }
            if ($flag & Cache::Memcached::F_STORABLE) {
                eval {
                    $value = Storable::thaw($value);
                };
                if ($@) {
                    warn "couldn't restore value. SKIP.\n$line\n";
                    next LOG;
                }
            }
        }

        $cache->set($key, $value, $xt)
            or warn "set $key FAILED.\n$line\n";
    }
    elsif ($rcmd eq "remove") {
        $key = decode_base64($key);
        $cache->delete($key)
            or warn "delete $key FAILED.\n$line\n";
    }
    elsif ($rcmd eq "clear") {
        $cache->flush_all
            or warn "flush_all FAILED.\n$line\n";
    }
}

__END__

=head1 DESCRIPTION

ktlog2memcached is KyotoTycoon's slave agent, replicate updates to memcached.

=head1 SYNOPSIS

    ktremotemgr slave -ts `date +%s000000000` -uw | ktlog2memcached --host 127.0.0.1 --port 11211

See also http://fallabs.com/blog-ja/promenade.cgi?id=115 .

=head2 Options

=over 4

=item host

memcached host (hostname or IP address). default: "localhost".

=item port

memcached port. default: 11211.

=item use-flag

If you are running a KyotoTycoon with a memcached plugin and you access via memcached client, memcached's flag value was appended at the end of each record value.

Cache::Memcached(perl library) is using the flag for detect type of value (raw, structured, compressed).

If "use-flag" is specified, ktlog2memcached handle the flag as same of Cache::Memcached.

=item config

You may write config.pl to pass the options to Cache::Memcached->new().

    # config.pl
    {
        servers => ["...", "..."],
        compress_threshold => 1024,
        # ... and more options
    });

    ktlog2memcached --config config.pl

=back

=head1 LICENSE

Copyright (C) FUJIWARA Shunichiro.

This software is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 AUTHOR

FUJIWARA Shunichiro E<lt>fujiwara.shunichiro@gmail.comE<gt>

=cut
